import numpy as np
from scipy.stats import norm

# Black-Scholes delta calculation
def calculate_delta(S, K, T, r, sigma, option_type):
    d1 = (np.log(S / K) + (r + (sigma**2) / 2) * T) / (sigma * np.sqrt(T))
    if option_type == 'call':
        delta = norm.cdf(d1)
    elif option_type == 'put':
        delta = norm.cdf(d1) - 1
    return delta

# Initial values
S0 = 100.0  # Current stock price
K = 100.0   # Strike price
T = 1.0    # Time to expiration (in years)
r = 0.05    # Risk-free interest rate
sigma = 0.2 # Volatility
option_type = 'call'  # 'call' or 'put'
option_position = 10   # Number of options in the initial position

# Initial portfolio delta
initial_delta = calculate_delta(S0, K, T, r, sigma, option_type) * option_position

print(f"Initial Delta: {initial_delta}")

# Simulate stock price changes
n_simulations = 100
stock_price_changes = np.random.normal(0, sigma * np.sqrt(T), n_simulations)

# Delta hedging
portfolio_value = []
stock_position = initial_delta * S0
option_position_value = option_position * calculate_delta(S0, K, T, r, sigma, option_type)

for price_change in stock_price_changes:
    stock_position += initial_delta * price_change
    option_position_value = option_position * calculate_delta(S0, K, T, r, sigma, option_type)
    portfolio_value.append(stock_position + option_position_value)

print(f"Final Portfolio Value: {portfolio_value[-1]}")
